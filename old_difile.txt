DifileView = require './difile-view'
BranchListView = require './branch-list-view'
{CompositeDisposable} = require 'atom'

module.exports = Difile =
  difileView: null
  modalPanel: null
  subscriptions: null

  activate: (state) ->
    console.log "activating!"
    @difileView = new DifileView(state.difileViewState)
    @modalPanel = atom.workspace.addModalPanel(item: @difileView.getElement(), visible: false)
    @branchListView = new BranchListView(state.difileViewState)
    console.log "created branchListView"


    # Events subscribed to in atom's system can be easily cleaned up with a CompositeDisposable
    @subscriptions = new CompositeDisposable

    # Register command that toggles this view
    @subscriptions.add atom.commands.add 'atom-workspace', 'difile:toggle': => @toggle()
    # @subscriptions.add atom.commands.add 'atom-workspace', 'difile:branch-list': => @toggle_branch_list()

  deactivate: ->
    @modalPanel.destroy()
    @subscriptions.dispose()
    @difileView.destroy()

  serialize: ->
    difileViewState: @difileView.serialize()

  # toggle_branch_list: ->
  #   visible = @branchListView.isVisible()
  #   console.log "toggle_branch_list called v: #{visible}"
  #   if visible
  #     @branchListView.hide()
  #   else
  #     @branchListView.toggle_display()
  #
  toggle: ->
    console.log 'Difile was toggled!'

    if @modalPanel.isVisible()
      @modalPanel.hide()
    else
      @modalPanel.show()
